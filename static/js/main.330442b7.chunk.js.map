{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","Sortingvisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getmergesortanimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getquicksortanimations","quickSortHelper","start","end","pi","pivot","a","b","partitionHelper","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","BAR_WIDTH","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","resetArrayagain","barStyle","document","getElementsByClassName","style","height","backgroundColor","window","prompt","alert","resetboth","console","log","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","x","getbubblesortanimations","className","map","value","idx","key","width","onClick","mergesort","quicksort","bubblesort","heapsort","setAnimationspeed","setArraysize","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.330442b7.chunk.js","sourcesContent":["export function getbubblesortanimations(array){\n    const animations = [];\n    if(array.length<=1) return array;\n    while(1){\n        let x = true;\n        for(let i=0;i<array.length-1;i++){\n          animations.push([i,i+1]);\n          animations.push([i,i+1]);\n          let a=array[i],b=array[i+1];\n            if(array[i]>array[i+1]){\n                array[i]=b;\n                array[i+1]=a;\n                animations.push([i,b]);\n                animations.push([i+1,a]);\n\n                 \n                x=false;\n            }\n            else{\n              animations.push([i,a]);\n              animations.push([i+1,b]) \n            }\n\n        \n        }\n        if(x)break;\n    }\n    return animations;\n\n}\nexport function getmergesortanimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\nexport function getquicksortanimations(array){\n  const animations = [];\n  quickSortHelper(array,0,array.length-1,animations);\n  return animations;\n}\nfunction quickSortHelper(\n  mainArray,\n  start,\n  end,\n  animations\n)\n{\n  if(start<end){\n    let pi=partitionHelper(mainArray,start,end,animations);\n    quickSortHelper(mainArray,start,pi-1,animations);\n    quickSortHelper(mainArray,pi+1,end,animations);\n  }\n}\nfunction partitionHelper(mainArray,start,end,animations){\n  let pivot = mainArray[end];\n  let i = start-1;\n  for(let j= start;j<=end-1;j++){\n    animations.push([j,pivot]);\n    animations.push([j,pivot]);\n    let a=mainArray[i],b=mainArray[j];\n    if(mainArray[j]<pivot){\n      mainArray[j]=a;mainArray[i]=b;\n      animations.push([j,a]);\n      animations.push([i,b]);\n      i++;\n    }\n    else{\n      animations.push([j,b]);\n      // animations.push([i,a]);\n    }\n  }\n  let a=mainArray[i+1],b=mainArray[end];\n  mainArray[i+1]=b;mainArray[end]=a;\n  animations.push([i+1,a]);\n  animations.push([end,b]);\n  animations.push([i+1,b]);\n  animations.push([end,a]);\n  return (i+1);\n}\n","import React from 'react';\nimport './Sortingvisualizer.css';\nimport {getbubblesortanimations} from '/home/ishankmittal1998/sortingvisualizer/src/SortingAlgorithms/SortingAlgorithms.js' \nimport {getmergesortanimations} from '/home/ishankmittal1998/sortingvisualizer/src/SortingAlgorithms/SortingAlgorithms.js' \nimport {getquicksortanimations} from '/home/ishankmittal1998/sortingvisualizer/src/SortingAlgorithms/SortingAlgorithms.js'\n\n\nlet ANIMATION_SPEED_MS = 20;\n\n\n// Change this value for the number of bars (value) in the array.\nlet NUMBER_OF_ARRAY_BARS = 330;\nlet BAR_WIDTH = 3;\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n    resetArray(){\n        const array= [];\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\n            array.push(randomIntFromInterval(5,800));\n        }\n        this.setState({array});\n    }\n    resetboth(){\n        this.resetArray();\n        this.resetArrayagain();\n    }\n    resetArrayagain(){\n        const array=this.state.array;\n        for(let i=0;i<array.length;i++){\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const barStyle = arrayBars[i].style;\n            barStyle.height = `${array[i]}px`;\n            barStyle.backgroundColor = 'turquoise';\n\n\n        }\n    }\n    setAnimationspeed(){\n        ANIMATION_SPEED_MS = window.prompt(\"range for animation speed (0,50]\");\n        while(ANIMATION_SPEED_MS<=0 || ANIMATION_SPEED_MS>50 ){\n        alert(\"Enter a Positive integer less than 51\");\n        ANIMATION_SPEED_MS = window.prompt(\"range for animation speed (0,50]\");\n        }\n\n    }\n    setArraysize(){\n        NUMBER_OF_ARRAY_BARS = window.prompt(\"range for array size [20,330]\");\n        while(NUMBER_OF_ARRAY_BARS<=0 || NUMBER_OF_ARRAY_BARS>300){\n            alert(\"Input out of range\");\n            NUMBER_OF_ARRAY_BARS = window.prompt(\"range for array size [20,330]\");\n        }\n        BAR_WIDTH = Math.floor(1500/NUMBER_OF_ARRAY_BARS);\n        this.resetboth();\n    }\n    mergesort(){\n        console.log(ANIMATION_SPEED_MS);\n        const animations = getmergesortanimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n\n    }\n    quicksort(){\n        const animations = getquicksortanimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            if(i%4===0)barOneStyle.backgroundColor = 'black';\n            else barOneStyle.backgroundColor = PRIMARY_COLOR;\n            }, i * ANIMATION_SPEED_MS);\n\n\n          }\n\n\n    }\n    bubblesort(){\n        const animations = getbubblesortanimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 4 < 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n\n    }\n    heapsort(){\n\n    }\n    render(){\n        const{array} = this.state;\n        return (\n            <div>\n            <div className=\"array-container\">\n             {array.map((value,idx)=>(\n                <div \n                    className=\"array-bar\" \n                    key={idx}\n                    style={{height: `${value}px`, width:`${BAR_WIDTH}px`}}>\n                    </div>\n             ))}\n\n            </div>\n            <div className=\"navbar\">\n            <button className=\"button\" onClick={()=> this.resetboth()}>Generate New Array</button>\n            <button className=\"button\" onClick={()=> this.mergesort()}>Merge Sort</button>\n            <button className=\"button\" onClick={()=> this.quicksort()}>Quick Sort</button>\n            <button className=\"button\" onClick={()=> this.bubblesort()}>Bubble Sort</button>\n            <button className=\"button\"  onClick={()=> this.heapsort()}>Heap Sort</button>\n            <button className=\"button\"  onClick={()=> this.setAnimationspeed()}>Change Animation Speed</button>\n            <button className=\"button\"  onClick={()=> this.setArraysize()}>Change Array Size</button>\n           \n            </div>\n            </div>\n        \n        \n        \n        );\n    \n    }\n}\n    \nfunction randomIntFromInterval(min,max){\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\nfunction check(a1,a2){\n    if(a1.length!==a2.length)return false;\n    for(let i=0;i<a1.length;i++){\n        if(a1[i]!==a2[i])return false;\n    }\n    return true;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport SortingVisualizer from './Sortingvisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>\n\n      </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}